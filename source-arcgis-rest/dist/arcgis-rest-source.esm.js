/* @preserve
* @terraformer/arcgis - v2.1.1 - MIT
* Copyright (c) 2012-2022 Environmental Systems Research Institute, Inc.
* Tue Aug 02 2022 14:23:48 GMT-0700 (Pacific Daylight Time)
*/
var I=function(I,g,C,A){var i=(A[0]-C[0])*(I[1]-C[1])-(A[1]-C[1])*(I[0]-C[0]),e=(g[0]-I[0])*(I[1]-C[1])-(g[1]-I[1])*(I[0]-C[0]),l=(A[1]-C[1])*(g[0]-I[0])-(A[0]-C[0])*(g[1]-I[1]);if(0!==l){var Z=i/l,s=e/l;if(Z>=0&&Z<=1&&s>=0&&s<=1)return!0}return!1},g=function(g,C){for(var A=0;A<g.length-1;A++)for(var i=0;i<C.length-1;i++)if(I(g[A],g[A+1],C[i],C[i+1]))return!0;return!1},C=function(I){for(var g,C=0,A=0,i=I.length,e=I[A];A<i-1;A++)C+=((g=I[A+1])[0]-e[0])*(g[1]+e[1]),e=g;return C>=0},A=function(I,C){var A=g(I,C),i=function(I,g){for(var C=!1,A=-1,i=I.length,e=i-1;++A<i;e=A)(I[A][1]<=g[1]&&g[1]<I[e][1]||I[e][1]<=g[1]&&g[1]<I[A][1])&&g[0]<(I[e][0]-I[A][0])*(g[1]-I[A][1])/(I[e][1]-I[A][1])+I[A][0]&&(C=!C);return C}(I,C[0]);return!(A||!i)},i=function I(i,e){var l={};if(i.features){l.type="FeatureCollection",l.features=[];for(var Z=0;Z<i.features.length;Z++)l.features.push(I(i.features[Z],e))}if("number"==typeof i.x&&"number"==typeof i.y&&(l.type="Point",l.coordinates=[i.x,i.y],"number"==typeof i.z&&l.coordinates.push(i.z)),i.points&&(l.type="MultiPoint",l.coordinates=i.points.slice(0)),i.paths&&(1===i.paths.length?(l.type="LineString",l.coordinates=i.paths[0].slice(0)):(l.type="MultiLineString",l.coordinates=i.paths.slice(0))),i.rings&&(l=function(I){for(var i,e,l,Z,s=[],o=[],d=0;d<I.length;d++){var t=(function(I,g){for(var C=0;C<I.length;C++)if(I[C]!==g[C])return!1;return!0}((Z=I[d].slice(0))[0],Z[Z.length-1])||Z.push(Z[0]),Z);if(!(t.length<4))if(C(t)){var a=[t.slice().reverse()];s.push(a)}else o.push(t.slice().reverse())}for(var m=[];o.length;){l=o.pop();var n=!1;for(i=s.length-1;i>=0;i--)if(e=s[i][0],A(e,l)){s[i].push(l),n=!0;break}n||m.push(l)}for(;m.length;){l=m.pop();var c=!1;for(i=s.length-1;i>=0;i--)if(e=s[i][0],g(e,l)){s[i].push(l),c=!0;break}c||s.push([l.reverse()])}return 1===s.length?{type:"Polygon",coordinates:s[0]}:{type:"MultiPolygon",coordinates:s}}(i.rings.slice(0))),"number"==typeof i.xmin&&"number"==typeof i.ymin&&"number"==typeof i.xmax&&"number"==typeof i.ymax&&(l.type="Polygon",l.coordinates=[[[i.xmax,i.ymax],[i.xmin,i.ymax],[i.xmin,i.ymin],[i.xmax,i.ymin],[i.xmax,i.ymax]]]),(i.geometry||i.attributes)&&(l.type="Feature",l.geometry=i.geometry?I(i.geometry):null,l.properties=i.attributes?function(I){var g={};for(var C in I)I.hasOwnProperty(C)&&(g[C]=I[C]);return g}(i.attributes):null,i.attributes))try{l.id=function(I,g){for(var C=g?[g,"OBJECTID","FID"]:["OBJECTID","FID"],A=0;A<C.length;A++){var i=C[A];if(i in I&&("string"==typeof I[i]||"number"==typeof I[i]))return I[i]}throw Error("No valid id attribute found")}(i.attributes,e)}catch(I){}return JSON.stringify(l.geometry)===JSON.stringify({})&&(l.geometry=null),i.spatialReference&&i.spatialReference.wkid&&4326!==i.spatialReference.wkid&&console.warn("Object converted in non-standard crs - "+JSON.stringify(i.spatialReference)),l},e=null;try{var l="undefined"!=typeof module&&"function"==typeof module.require&&module.require("worker_threads")||"function"==typeof __non_webpack_require__&&__non_webpack_require__("worker_threads")||"function"==typeof require&&require("worker_threads");e=l.Worker}catch(I){}function Z(I,g,C){var A=void 0===g?null:g,i=function(I,g){return Buffer.from(I,"base64").toString(g?"utf16":"utf8")}(I,void 0!==C&&C),l=i.indexOf("\n",10)+1,Z=i.substring(l)+(A?"//# sourceMappingURL="+A:"");return function(I){return new e(Z,Object.assign({},I,{eval:!0}))}}function s(I,g,C){var A=void 0===g?null:g,i=function(I,g){var C=atob(I);if(g){for(var A=new Uint8Array(C.length),i=0,e=C.length;i<e;++i)A[i]=C.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(A.buffer))}return C}(I,void 0!==C&&C),e=i.indexOf("\n",10)+1,l=i.substring(e)+(A?"//# sourceMappingURL="+A:""),Z=new Blob([l],{type:"application/javascript"});return URL.createObjectURL(Z)}var o="[object process]"===Object.prototype.toString.call("undefined"!=typeof process?process:0);var d,t,a,m=(d="",t=null,a=!1,o?Z(d,t,a):function(I,g,C){var A;return function(i){return A=A||s(I,g,C),new Worker(A,i)}}(d,t,a));const n=40075016.68557849;function c(I,g){const C=I*(n/2)/180;let A=Math.log(Math.tan((90+g)*Math.PI/360))/(Math.PI/180);return A=A*(n/2)/180,{x:C,y:A}}function G(I,g=256){return n/(g*(1<<I))}const r=["102100","900913","3857","3587","54004","41001","102113","3785"];function W(I){const g=[Math.min(I[0],I[2]),Math.min(I[1],I[3])],C=[Math.max(I[0],I[2]),Math.max(I[1],I[3])];let A=c(g[0],g[1]),i=c(C[0],C[1]);return{type:"extent",xmin:A.x,ymin:A.y,xmax:i.x,ymax:i.y,spatialReferece:{latestWkid:102100,wkid:3857}}}function b(I,g,C){const A=(I,g)=>{const C=function(I,g){return{lng:180*I/(n/2),lat:360*Math.atan(Math.exp(g*Math.PI/(n/2)))/Math.PI-90}}(I,g);return[C.lng,C.lat]};return r.indexOf(C)>-1?I.map(((I,C)=>I.map(((I,i)=>A(I,g[C][i]))))):I.map(((I,C)=>I.map(((I,A)=>[I,g[C][A]]))))}function V(I,g,C,A,i){return g.map(((e,l)=>{let Z=0;return Array(e).fill(void 0).map(((e,s)=>{const o=g.reduce(((I,g,C)=>I+(C<l?g:0)),0),d=I[o+s],t=i?-1:1;let a;return a=0===s?d*t+A/C:d*t+Z,Z=a,a})).map((I=>I*C))}))}function u(I){return I&&I.__esModule&&Object.prototype.hasOwnProperty.call(I,"default")?I.default:I}var y={
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
read:function(I,g,C,A,i){var e,l,Z=8*i-A-1,s=(1<<Z)-1,o=s>>1,d=-7,t=C?i-1:0,a=C?-1:1,m=I[g+t];for(t+=a,e=m&(1<<-d)-1,m>>=-d,d+=Z;d>0;e=256*e+I[g+t],t+=a,d-=8);for(l=e&(1<<-d)-1,e>>=-d,d+=A;d>0;l=256*l+I[g+t],t+=a,d-=8);if(0===e)e=1-o;else{if(e===s)return l?NaN:1/0*(m?-1:1);l+=Math.pow(2,A),e-=o}return(m?-1:1)*l*Math.pow(2,e-A)},write:function(I,g,C,A,i,e){var l,Z,s,o=8*e-i-1,d=(1<<o)-1,t=d>>1,a=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,m=A?0:e-1,n=A?1:-1,c=g<0||0===g&&1/g<0?1:0;for(g=Math.abs(g),isNaN(g)||g===1/0?(Z=isNaN(g)?1:0,l=d):(l=Math.floor(Math.log(g)/Math.LN2),g*(s=Math.pow(2,-l))<1&&(l--,s*=2),(g+=l+t>=1?a/s:a*Math.pow(2,1-t))*s>=2&&(l++,s/=2),l+t>=d?(Z=0,l=d):l+t>=1?(Z=(g*s-1)*Math.pow(2,i),l+=t):(Z=g*Math.pow(2,t-1)*Math.pow(2,i),l=0));i>=8;I[C+m]=255&Z,m+=n,Z/=256,i-=8);for(l=l<<i|Z,o+=i;o>0;I[C+m]=255&l,m+=n,l/=256,o-=8);I[C+m-n]|=128*c}},B=h,p=y;function h(I){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(I)?I:new Uint8Array(I||0),this.pos=0,this.type=0,this.length=this.buf.length}h.Varint=0,h.Fixed64=1,h.Bytes=2,h.Fixed32=5;var Y=4294967296,H=1/Y,w="undefined"==typeof TextDecoder?null:new TextDecoder("utf8");function R(I){return I.type===h.Bytes?I.readVarint()+I.pos:I.pos+1}function K(I,g,C){return C?4294967296*g+(I>>>0):4294967296*(g>>>0)+(I>>>0)}function X(I,g,C){var A=g<=16383?1:g<=2097151?2:g<=268435455?3:Math.floor(Math.log(g)/(7*Math.LN2));C.realloc(A);for(var i=C.pos-1;i>=I;i--)C.buf[i+A]=C.buf[i]}function J(I,g){for(var C=0;C<I.length;C++)g.writeVarint(I[C])}function F(I,g){for(var C=0;C<I.length;C++)g.writeSVarint(I[C])}function S(I,g){for(var C=0;C<I.length;C++)g.writeFloat(I[C])}function T(I,g){for(var C=0;C<I.length;C++)g.writeDouble(I[C])}function v(I,g){for(var C=0;C<I.length;C++)g.writeBoolean(I[C])}function k(I,g){for(var C=0;C<I.length;C++)g.writeFixed32(I[C])}function N(I,g){for(var C=0;C<I.length;C++)g.writeSFixed32(I[C])}function D(I,g){for(var C=0;C<I.length;C++)g.writeFixed64(I[C])}function P(I,g){for(var C=0;C<I.length;C++)g.writeSFixed64(I[C])}function f(I,g){return(I[g]|I[g+1]<<8|I[g+2]<<16)+16777216*I[g+3]}function L(I,g,C){I[C]=g,I[C+1]=g>>>8,I[C+2]=g>>>16,I[C+3]=g>>>24}function M(I,g){return(I[g]|I[g+1]<<8|I[g+2]<<16)+(I[g+3]<<24)}h.prototype={destroy:function(){this.buf=null},readFields:function(I,g,C){for(C=C||this.length;this.pos<C;){var A=this.readVarint(),i=A>>3,e=this.pos;this.type=7&A,I(i,g,this),this.pos===e&&this.skip(A)}return g},readMessage:function(I,g){return this.readFields(I,g,this.readVarint()+this.pos)},readFixed32:function(){var I=f(this.buf,this.pos);return this.pos+=4,I},readSFixed32:function(){var I=M(this.buf,this.pos);return this.pos+=4,I},readFixed64:function(){var I=f(this.buf,this.pos)+f(this.buf,this.pos+4)*Y;return this.pos+=8,I},readSFixed64:function(){var I=f(this.buf,this.pos)+M(this.buf,this.pos+4)*Y;return this.pos+=8,I},readFloat:function(){var I=p.read(this.buf,this.pos,!0,23,4);return this.pos+=4,I},readDouble:function(){var I=p.read(this.buf,this.pos,!0,52,8);return this.pos+=8,I},readVarint:function(I){var g,C,A=this.buf;return g=127&(C=A[this.pos++]),C<128?g:(g|=(127&(C=A[this.pos++]))<<7,C<128?g:(g|=(127&(C=A[this.pos++]))<<14,C<128?g:(g|=(127&(C=A[this.pos++]))<<21,C<128?g:function(I,g,C){var A,i,e=C.buf;if(i=e[C.pos++],A=(112&i)>>4,i<128)return K(I,A,g);if(i=e[C.pos++],A|=(127&i)<<3,i<128)return K(I,A,g);if(i=e[C.pos++],A|=(127&i)<<10,i<128)return K(I,A,g);if(i=e[C.pos++],A|=(127&i)<<17,i<128)return K(I,A,g);if(i=e[C.pos++],A|=(127&i)<<24,i<128)return K(I,A,g);if(i=e[C.pos++],A|=(1&i)<<31,i<128)return K(I,A,g);throw new Error("Expected varint not more than 10 bytes")}(g|=(15&(C=A[this.pos]))<<28,I,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var I=this.readVarint();return I%2==1?(I+1)/-2:I/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var I=this.readVarint()+this.pos,g=this.pos;return this.pos=I,I-g>=12&&w?function(I,g,C){return w.decode(I.subarray(g,C))}(this.buf,g,I):function(I,g,C){var A="",i=g;for(;i<C;){var e,l,Z,s=I[i],o=null,d=s>239?4:s>223?3:s>191?2:1;if(i+d>C)break;1===d?s<128&&(o=s):2===d?128==(192&(e=I[i+1]))&&(o=(31&s)<<6|63&e)<=127&&(o=null):3===d?(e=I[i+1],l=I[i+2],128==(192&e)&&128==(192&l)&&((o=(15&s)<<12|(63&e)<<6|63&l)<=2047||o>=55296&&o<=57343)&&(o=null)):4===d&&(e=I[i+1],l=I[i+2],Z=I[i+3],128==(192&e)&&128==(192&l)&&128==(192&Z)&&((o=(15&s)<<18|(63&e)<<12|(63&l)<<6|63&Z)<=65535||o>=1114112)&&(o=null)),null===o?(o=65533,d=1):o>65535&&(o-=65536,A+=String.fromCharCode(o>>>10&1023|55296),o=56320|1023&o),A+=String.fromCharCode(o),i+=d}return A}(this.buf,g,I)},readBytes:function(){var I=this.readVarint()+this.pos,g=this.buf.subarray(this.pos,I);return this.pos=I,g},readPackedVarint:function(I,g){if(this.type!==h.Bytes)return I.push(this.readVarint(g));var C=R(this);for(I=I||[];this.pos<C;)I.push(this.readVarint(g));return I},readPackedSVarint:function(I){if(this.type!==h.Bytes)return I.push(this.readSVarint());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readSVarint());return I},readPackedBoolean:function(I){if(this.type!==h.Bytes)return I.push(this.readBoolean());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readBoolean());return I},readPackedFloat:function(I){if(this.type!==h.Bytes)return I.push(this.readFloat());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readFloat());return I},readPackedDouble:function(I){if(this.type!==h.Bytes)return I.push(this.readDouble());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readDouble());return I},readPackedFixed32:function(I){if(this.type!==h.Bytes)return I.push(this.readFixed32());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readFixed32());return I},readPackedSFixed32:function(I){if(this.type!==h.Bytes)return I.push(this.readSFixed32());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readSFixed32());return I},readPackedFixed64:function(I){if(this.type!==h.Bytes)return I.push(this.readFixed64());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readFixed64());return I},readPackedSFixed64:function(I){if(this.type!==h.Bytes)return I.push(this.readSFixed64());var g=R(this);for(I=I||[];this.pos<g;)I.push(this.readSFixed64());return I},skip:function(I){var g=7&I;if(g===h.Varint)for(;this.buf[this.pos++]>127;);else if(g===h.Bytes)this.pos=this.readVarint()+this.pos;else if(g===h.Fixed32)this.pos+=4;else{if(g!==h.Fixed64)throw new Error("Unimplemented type: "+g);this.pos+=8}},writeTag:function(I,g){this.writeVarint(I<<3|g)},realloc:function(I){for(var g=this.length||16;g<this.pos+I;)g*=2;if(g!==this.length){var C=new Uint8Array(g);C.set(this.buf),this.buf=C,this.length=g}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(I){this.realloc(4),L(this.buf,I,this.pos),this.pos+=4},writeSFixed32:function(I){this.realloc(4),L(this.buf,I,this.pos),this.pos+=4},writeFixed64:function(I){this.realloc(8),L(this.buf,-1&I,this.pos),L(this.buf,Math.floor(I*H),this.pos+4),this.pos+=8},writeSFixed64:function(I){this.realloc(8),L(this.buf,-1&I,this.pos),L(this.buf,Math.floor(I*H),this.pos+4),this.pos+=8},writeVarint:function(I){(I=+I||0)>268435455||I<0?function(I,g){var C,A;I>=0?(C=I%4294967296|0,A=I/4294967296|0):(A=~(-I/4294967296),4294967295^(C=~(-I%4294967296))?C=C+1|0:(C=0,A=A+1|0));if(I>=0x10000000000000000||I<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");g.realloc(10),function(I,g,C){C.buf[C.pos++]=127&I|128,I>>>=7,C.buf[C.pos++]=127&I|128,I>>>=7,C.buf[C.pos++]=127&I|128,I>>>=7,C.buf[C.pos++]=127&I|128,I>>>=7,C.buf[C.pos]=127&I}(C,0,g),function(I,g){var C=(7&I)<<4;if(g.buf[g.pos++]|=C|((I>>>=3)?128:0),!I)return;if(g.buf[g.pos++]=127&I|((I>>>=7)?128:0),!I)return;if(g.buf[g.pos++]=127&I|((I>>>=7)?128:0),!I)return;if(g.buf[g.pos++]=127&I|((I>>>=7)?128:0),!I)return;if(g.buf[g.pos++]=127&I|((I>>>=7)?128:0),!I)return;g.buf[g.pos++]=127&I}(A,g)}(I,this):(this.realloc(4),this.buf[this.pos++]=127&I|(I>127?128:0),I<=127||(this.buf[this.pos++]=127&(I>>>=7)|(I>127?128:0),I<=127||(this.buf[this.pos++]=127&(I>>>=7)|(I>127?128:0),I<=127||(this.buf[this.pos++]=I>>>7&127))))},writeSVarint:function(I){this.writeVarint(I<0?2*-I-1:2*I)},writeBoolean:function(I){this.writeVarint(Boolean(I))},writeString:function(I){I=String(I),this.realloc(4*I.length),this.pos++;var g=this.pos;this.pos=function(I,g,C){for(var A,i,e=0;e<g.length;e++){if((A=g.charCodeAt(e))>55295&&A<57344){if(!i){A>56319||e+1===g.length?(I[C++]=239,I[C++]=191,I[C++]=189):i=A;continue}if(A<56320){I[C++]=239,I[C++]=191,I[C++]=189,i=A;continue}A=i-55296<<10|A-56320|65536,i=null}else i&&(I[C++]=239,I[C++]=191,I[C++]=189,i=null);A<128?I[C++]=A:(A<2048?I[C++]=A>>6|192:(A<65536?I[C++]=A>>12|224:(I[C++]=A>>18|240,I[C++]=A>>12&63|128),I[C++]=A>>6&63|128),I[C++]=63&A|128)}return C}(this.buf,I,this.pos);var C=this.pos-g;C>=128&&X(g,C,this),this.pos=g-1,this.writeVarint(C),this.pos+=C},writeFloat:function(I){this.realloc(4),p.write(this.buf,I,this.pos,!0,23,4),this.pos+=4},writeDouble:function(I){this.realloc(8),p.write(this.buf,I,this.pos,!0,52,8),this.pos+=8},writeBytes:function(I){var g=I.length;this.writeVarint(g),this.realloc(g);for(var C=0;C<g;C++)this.buf[this.pos++]=I[C]},writeRawMessage:function(I,g){this.pos++;var C=this.pos;I(g,this);var A=this.pos-C;A>=128&&X(C,A,this),this.pos=C-1,this.writeVarint(A),this.pos+=A},writeMessage:function(I,g,C){this.writeTag(I,h.Bytes),this.writeRawMessage(g,C)},writePackedVarint:function(I,g){g.length&&this.writeMessage(I,J,g)},writePackedSVarint:function(I,g){g.length&&this.writeMessage(I,F,g)},writePackedBoolean:function(I,g){g.length&&this.writeMessage(I,v,g)},writePackedFloat:function(I,g){g.length&&this.writeMessage(I,S,g)},writePackedDouble:function(I,g){g.length&&this.writeMessage(I,T,g)},writePackedFixed32:function(I,g){g.length&&this.writeMessage(I,k,g)},writePackedSFixed32:function(I,g){g.length&&this.writeMessage(I,N,g)},writePackedFixed64:function(I,g){g.length&&this.writeMessage(I,D,g)},writePackedSFixed64:function(I,g){g.length&&this.writeMessage(I,P,g)},writeBytesField:function(I,g){this.writeTag(I,h.Bytes),this.writeBytes(g)},writeFixed32Field:function(I,g){this.writeTag(I,h.Fixed32),this.writeFixed32(g)},writeSFixed32Field:function(I,g){this.writeTag(I,h.Fixed32),this.writeSFixed32(g)},writeFixed64Field:function(I,g){this.writeTag(I,h.Fixed64),this.writeFixed64(g)},writeSFixed64Field:function(I,g){this.writeTag(I,h.Fixed64),this.writeSFixed64(g)},writeVarintField:function(I,g){this.writeTag(I,h.Varint),this.writeVarint(g)},writeSVarintField:function(I,g){this.writeTag(I,h.Varint),this.writeSVarint(g)},writeStringField:function(I,g){this.writeTag(I,h.Bytes),this.writeString(g)},writeFloatField:function(I,g){this.writeTag(I,h.Fixed32),this.writeFloat(g)},writeDoubleField:function(I,g){this.writeTag(I,h.Fixed64),this.writeDouble(g)},writeBooleanField:function(I,g){this.writeVarintField(I,Boolean(g))}};var z,U=u(B);!function(I){I[I.esriGeometryTypePoint=0]="esriGeometryTypePoint",I[I.esriGeometryTypeMultipoint=1]="esriGeometryTypeMultipoint",I[I.esriGeometryTypePolyline=2]="esriGeometryTypePolyline",I[I.esriGeometryTypePolygon=3]="esriGeometryTypePolygon",I[I.esriGeometryTypeMultipatch=4]="esriGeometryTypeMultipatch",I[I.esriGeometryTypeNone=127]="esriGeometryTypeNone"}(z||(z={}));const Q={ConvertPbf:class{constructor(I){this.data=I}async convert(){var I;const g=new U(this.data),C=function(){let I={read:function(g,C){return g.readFields(I._readField,{version:"",queryResult:null},C)},_readField:function(g,C,A){1===g?C.version=A.readString():2===g&&(C.queryResult=I.QueryResult.read(A,A.readVarint()+A.pos))},write:function(g,C){g.version&&C.writeStringField(1,g.version),g.queryResult&&C.writeMessage(2,I.QueryResult.write,g.queryResult)},GeometryType:{esriGeometryTypePoint:{value:0,options:{}},esriGeometryTypeMultipoint:{value:1,options:{}},esriGeometryTypePolyline:{value:2,options:{}},esriGeometryTypePolygon:{value:3,options:{}},esriGeometryTypeMultipatch:{value:4,options:{}},esriGeometryTypeNone:{value:127,options:{}}},FieldType:{esriFieldTypeSmallInteger:{value:0,options:{}},esriFieldTypeInteger:{value:1,options:{}},esriFieldTypeSingle:{value:2,options:{}},esriFieldTypeDouble:{value:3,options:{}},esriFieldTypeString:{value:4,options:{}},esriFieldTypeDate:{value:5,options:{}},esriFieldTypeOID:{value:6,options:{}},esriFieldTypeGeometry:{value:7,options:{}},esriFieldTypeBlob:{value:8,options:{}},esriFieldTypeRaster:{value:9,options:{}},esriFieldTypeGUID:{value:10,options:{}},esriFieldTypeGlobalID:{value:11,options:{}},esriFieldTypeXML:{value:12,options:{}}},SQLType:{sqlTypeBigInt:{value:0,options:{}},sqlTypeBinary:{value:1,options:{}},sqlTypeBit:{value:2,options:{}},sqlTypeChar:{value:3,options:{}},sqlTypeDate:{value:4,options:{}},sqlTypeDecimal:{value:5,options:{}},sqlTypeDouble:{value:6,options:{}},sqlTypeFloat:{value:7,options:{}},sqlTypeGeometry:{value:8,options:{}},sqlTypeGUID:{value:9,options:{}},sqlTypeInteger:{value:10,options:{}},sqlTypeLongNVarchar:{value:11,options:{}},sqlTypeLongVarbinary:{value:12,options:{}},sqlTypeLongVarchar:{value:13,options:{}},sqlTypeNChar:{value:14,options:{}},sqlTypeNVarchar:{value:15,options:{}},sqlTypeOther:{value:16,options:{}},sqlTypeReal:{value:17,options:{}},sqlTypeSmallInt:{value:18,options:{}},sqlTypeSqlXml:{value:19,options:{}},sqlTypeTime:{value:20,options:{}},sqlTypeTimestamp:{value:21,options:{}},sqlTypeTimestamp2:{value:22,options:{}},sqlTypeTinyInt:{value:23,options:{}},sqlTypeVarbinary:{value:24,options:{}},sqlTypeVarchar:{value:25,options:{}}},QuantizeOriginPostion:{upperLeft:{value:0,options:{}},lowerLeft:{value:1,options:{}}},SpatialReference:{}};return I.SpatialReference.read=function(g,C){return g.readFields(I.SpatialReference._readField,{wkid:0,lastestWkid:0,vcsWkid:0,latestVcsWkid:0,wkt:""},C)},I.SpatialReference._readField=function(I,g,C){1===I?g.wkid=C.readVarint():2===I?g.lastestWkid=C.readVarint():3===I?g.vcsWkid=C.readVarint():4===I?g.latestVcsWkid=C.readVarint():5===I&&(g.wkt=C.readString())},I.SpatialReference.write=function(I,g){I.wkid&&g.writeVarintField(1,I.wkid),I.lastestWkid&&g.writeVarintField(2,I.lastestWkid),I.vcsWkid&&g.writeVarintField(3,I.vcsWkid),I.latestVcsWkid&&g.writeVarintField(4,I.latestVcsWkid),I.wkt&&g.writeStringField(5,I.wkt)},I.Field={},I.Field.read=function(g,C){return g.readFields(I.Field._readField,{name:"",fieldType:0,alias:"",sqlType:0,domain:"",defaultValue:""},C)},I.Field._readField=function(I,g,C){1===I?g.name=C.readString():2===I?g.fieldType=C.readVarint():3===I?g.alias=C.readString():4===I?g.sqlType=C.readVarint():5===I?g.domain=C.readString():6===I&&(g.defaultValue=C.readString())},I.Field.write=function(I,g){I.name&&g.writeStringField(1,I.name),I.fieldType&&g.writeVarintField(2,I.fieldType),I.alias&&g.writeStringField(3,I.alias),I.sqlType&&g.writeVarintField(4,I.sqlType),I.domain&&g.writeStringField(5,I.domain),I.defaultValue&&g.writeStringField(6,I.defaultValue)},I.Value={},I.Value.read=function(g,C){return g.readFields(I.Value._readField,{string_value:"",value_type:null,float_value:0,double_value:0,sint_value:0,uint_value:0,int64_value:0,uint64_value:0,sint64_value:0,bool_value:!1},C)},I.Value._readField=function(I,g,C){1===I?(g.string_value=C.readString(),g.value_type="string_value"):2===I?(g.float_value=C.readFloat(),g.value_type="float_value"):3===I?(g.double_value=C.readDouble(),g.value_type="double_value"):4===I?(g.sint_value=C.readSVarint(),g.value_type="sint_value"):5===I?(g.uint_value=C.readVarint(),g.value_type="uint_value"):6===I?(g.int64_value=C.readVarint(!0),g.value_type="int64_value"):7===I?(g.uint64_value=C.readVarint(),g.value_type="uint64_value"):8===I?(g.sint64_value=C.readSVarint(),g.value_type="sint64_value"):9===I&&(g.bool_value=C.readBoolean(),g.value_type="bool_value")},I.Value.write=function(I,g){I.string_value&&g.writeStringField(1,I.string_value),I.float_value&&g.writeFloatField(2,I.float_value),I.double_value&&g.writeDoubleField(3,I.double_value),I.sint_value&&g.writeSVarintField(4,I.sint_value),I.uint_value&&g.writeVarintField(5,I.uint_value),I.int64_value&&g.writeVarintField(6,I.int64_value),I.uint64_value&&g.writeVarintField(7,I.uint64_value),I.sint64_value&&g.writeSVarintField(8,I.sint64_value),I.bool_value&&g.writeBooleanField(9,I.bool_value)},I.Geometry={},I.Geometry.read=function(g,C){return g.readFields(I.Geometry._readField,{lengths:[],coords:[]},C)},I.Geometry._readField=function(I,g,C){2===I?C.readPackedVarint(g.lengths):3===I&&C.readPackedSVarint(g.coords)},I.Geometry.write=function(I,g){I.lengths&&g.writePackedVarint(2,I.lengths),I.coords&&g.writePackedSVarint(3,I.coords)},I.esriShapeBuffer={},I.esriShapeBuffer.read=function(g,C){return g.readFields(I.esriShapeBuffer._readField,{bytes:null},C)},I.esriShapeBuffer._readField=function(I,g,C){1===I&&(g.bytes=C.readBytes())},I.esriShapeBuffer.write=function(I,g){I.bytes&&g.writeBytesField(1,I.bytes)},I.Feature={},I.Feature.read=function(g,C){return g.readFields(I.Feature._readField,{attributes:[],geometry:null,compressed_geometry:null,shapeBuffer:null,centroid:null},C)},I.Feature._readField=function(g,C,A){1===g?C.attributes.push(I.Value.read(A,A.readVarint()+A.pos)):2===g?(C.geometry=I.Geometry.read(A,A.readVarint()+A.pos),C.compressed_geometry="geometry"):3===g?(C.shapeBuffer=I.esriShapeBuffer.read(A,A.readVarint()+A.pos),C.compressed_geometry="shapeBuffer"):4===g&&(C.centroid=I.Geometry.read(A,A.readVarint()+A.pos))},I.Feature.write=function(g,C){if(g.attributes)for(var A=0;A<g.attributes.length;A++)C.writeMessage(1,I.Value.write,g.attributes[A]);g.geometry&&C.writeMessage(2,I.Geometry.write,g.geometry),g.shapeBuffer&&C.writeMessage(3,I.esriShapeBuffer.write,g.shapeBuffer),g.centroid&&C.writeMessage(4,I.Geometry.write,g.centroid)},I.UniqueIdField={},I.UniqueIdField.read=function(g,C){return g.readFields(I.UniqueIdField._readField,{name:"",isSystemMaintained:!1},C)},I.UniqueIdField._readField=function(I,g,C){1===I?g.name=C.readString():2===I&&(g.isSystemMaintained=C.readBoolean())},I.UniqueIdField.write=function(I,g){I.name&&g.writeStringField(1,I.name),I.isSystemMaintained&&g.writeBooleanField(2,I.isSystemMaintained)},I.GeometryProperties={},I.GeometryProperties.read=function(g,C){return g.readFields(I.GeometryProperties._readField,{shapeAreaFieldName:"",shapeLengthFieldName:"",units:""},C)},I.GeometryProperties._readField=function(I,g,C){1===I?g.shapeAreaFieldName=C.readString():2===I?g.shapeLengthFieldName=C.readString():3===I&&(g.units=C.readString())},I.GeometryProperties.write=function(I,g){I.shapeAreaFieldName&&g.writeStringField(1,I.shapeAreaFieldName),I.shapeLengthFieldName&&g.writeStringField(2,I.shapeLengthFieldName),I.units&&g.writeStringField(3,I.units)},I.ServerGens={},I.ServerGens.read=function(g,C){return g.readFields(I.ServerGens._readField,{minServerGen:0,serverGen:0},C)},I.ServerGens._readField=function(I,g,C){1===I?g.minServerGen=C.readVarint():2===I&&(g.serverGen=C.readVarint())},I.ServerGens.write=function(I,g){I.minServerGen&&g.writeVarintField(1,I.minServerGen),I.serverGen&&g.writeVarintField(2,I.serverGen)},I.Scale={},I.Scale.read=function(g,C){return g.readFields(I.Scale._readField,{xScale:0,yScale:0,mScale:0,zScale:0},C)},I.Scale._readField=function(I,g,C){1===I?g.xScale=C.readDouble():2===I?g.yScale=C.readDouble():3===I?g.mScale=C.readDouble():4===I&&(g.zScale=C.readDouble())},I.Scale.write=function(I,g){I.xScale&&g.writeDoubleField(1,I.xScale),I.yScale&&g.writeDoubleField(2,I.yScale),I.mScale&&g.writeDoubleField(3,I.mScale),I.zScale&&g.writeDoubleField(4,I.zScale)},I.Translate={},I.Translate.read=function(g,C){return g.readFields(I.Translate._readField,{xTranslate:0,yTranslate:0,mTranslate:0,zTranslate:0},C)},I.Translate._readField=function(I,g,C){1===I?g.xTranslate=C.readDouble():2===I?g.yTranslate=C.readDouble():3===I?g.mTranslate=C.readDouble():4===I&&(g.zTranslate=C.readDouble())},I.Translate.write=function(I,g){I.xTranslate&&g.writeDoubleField(1,I.xTranslate),I.yTranslate&&g.writeDoubleField(2,I.yTranslate),I.mTranslate&&g.writeDoubleField(3,I.mTranslate),I.zTranslate&&g.writeDoubleField(4,I.zTranslate)},I.Transform={},I.Transform.read=function(g,C){return g.readFields(I.Transform._readField,{quantizeOriginPostion:0,scale:null,translate:null},C)},I.Transform._readField=function(g,C,A){1===g?C.quantizeOriginPostion=A.readVarint():2===g?C.scale=I.Scale.read(A,A.readVarint()+A.pos):3===g&&(C.translate=I.Translate.read(A,A.readVarint()+A.pos))},I.Transform.write=function(g,C){g.quantizeOriginPostion&&C.writeVarintField(1,g.quantizeOriginPostion),g.scale&&C.writeMessage(2,I.Scale.write,g.scale),g.translate&&C.writeMessage(3,I.Translate.write,g.translate)},I.FeatureResult={},I.FeatureResult.read=function(g,C){return g.readFields(I.FeatureResult._readField,{objectIdFieldName:"",uniqueIdField:null,globalIdFieldName:"",geohashFieldName:"",geometryProperties:null,serverGens:null,geometryType:0,spatialReference:null,exceededTransferLimit:!1,hasZ:!1,hasM:!1,transform:null,fields:[],values:[],features:[]},C)},I.FeatureResult._readField=function(g,C,A){1===g?C.objectIdFieldName=A.readString():2===g?C.uniqueIdField=I.UniqueIdField.read(A,A.readVarint()+A.pos):3===g?C.globalIdFieldName=A.readString():4===g?C.geohashFieldName=A.readString():5===g?C.geometryProperties=I.GeometryProperties.read(A,A.readVarint()+A.pos):6===g?C.serverGens=I.ServerGens.read(A,A.readVarint()+A.pos):7===g?C.geometryType=A.readVarint():8===g?C.spatialReference=I.SpatialReference.read(A,A.readVarint()+A.pos):9===g?C.exceededTransferLimit=A.readBoolean():10===g?C.hasZ=A.readBoolean():11===g?C.hasM=A.readBoolean():12===g?C.transform=I.Transform.read(A,A.readVarint()+A.pos):13===g?C.fields.push(I.Field.read(A,A.readVarint()+A.pos)):14===g?C.values.push(I.Value.read(A,A.readVarint()+A.pos)):15===g&&C.features.push(I.Feature.read(A,A.readVarint()+A.pos))},I.FeatureResult.write=function(g,C){if(g.objectIdFieldName&&C.writeStringField(1,g.objectIdFieldName),g.uniqueIdField&&C.writeMessage(2,I.UniqueIdField.write,g.uniqueIdField),g.globalIdFieldName&&C.writeStringField(3,g.globalIdFieldName),g.geohashFieldName&&C.writeStringField(4,g.geohashFieldName),g.geometryProperties&&C.writeMessage(5,I.GeometryProperties.write,g.geometryProperties),g.serverGens&&C.writeMessage(6,I.ServerGens.write,g.serverGens),g.geometryType&&C.writeVarintField(7,g.geometryType),g.spatialReference&&C.writeMessage(8,I.SpatialReference.write,g.spatialReference),g.exceededTransferLimit&&C.writeBooleanField(9,g.exceededTransferLimit),g.hasZ&&C.writeBooleanField(10,g.hasZ),g.hasM&&C.writeBooleanField(11,g.hasM),g.transform&&C.writeMessage(12,I.Transform.write,g.transform),g.fields)for(var A=0;A<g.fields.length;A++)C.writeMessage(13,I.Field.write,g.fields[A]);if(g.values)for(A=0;A<g.values.length;A++)C.writeMessage(14,I.Value.write,g.values[A]);if(g.features)for(A=0;A<g.features.length;A++)C.writeMessage(15,I.Feature.write,g.features[A])},I.CountResult={},I.CountResult.read=function(g,C){return g.readFields(I.CountResult._readField,{count:0},C)},I.CountResult._readField=function(I,g,C){1===I&&(g.count=C.readVarint())},I.CountResult.write=function(I,g){I.count&&g.writeVarintField(1,I.count)},I.ObjectIdsResult={},I.ObjectIdsResult.read=function(g,C){return g.readFields(I.ObjectIdsResult._readField,{objectIdFieldName:"",serverGens:null,objectIds:[]},C)},I.ObjectIdsResult._readField=function(g,C,A){1===g?C.objectIdFieldName=A.readString():2===g?C.serverGens=I.ServerGens.read(A,A.readVarint()+A.pos):3===g&&A.readPackedVarint(C.objectIds)},I.ObjectIdsResult.write=function(g,C){g.objectIdFieldName&&C.writeStringField(1,g.objectIdFieldName),g.serverGens&&C.writeMessage(2,I.ServerGens.write,g.serverGens),g.objectIds&&C.writePackedVarint(3,g.objectIds)},I.QueryResult={},I.QueryResult.read=function(g,C){return g.readFields(I.QueryResult._readField,{featureResult:null,Results:null,countResult:null,idsResult:null},C)},I.QueryResult._readField=function(g,C,A){1===g?(C.featureResult=I.FeatureResult.read(A,A.readVarint()+A.pos),C.Results="featureResult"):2===g?(C.countResult=I.CountResult.read(A,A.readVarint()+A.pos),C.Results="countResult"):3===g&&(C.idsResult=I.ObjectIdsResult.read(A,A.readVarint()+A.pos),C.Results="idsResult")},I.QueryResult.write=function(g,C){g.featureResult&&C.writeMessage(1,I.FeatureResult.write,g.featureResult),g.countResult&&C.writeMessage(2,I.CountResult.write,g.countResult),g.idsResult&&C.writeMessage(3,I.ObjectIdsResult.write,g.idsResult)},I}().read(g);if(null===C.queryResult)return this._buildResponse({exceededTransferLimit:!0},[]);const A=C.queryResult.featureResult,i=A.fields.map((I=>I.name)),e=A.transform.translate,l=A.transform.scale,Z=A.geometryType,s=A.transform.quantizeOriginPostion,o=null===(I=A.spatialReference)||void 0===I?void 0:I.wkid.toString(),d=A.features.map((I=>{let g=I.attributes.map(((I,g)=>({key:i[g],value:I[I.value_type]}))).reduce(((I,g)=>{const C={};return C[g.key]=g.value,{...I,...C}}),{}),C=[[[]]];if(null!==I.geometry){let g=Z===z.esriGeometryTypePoint?[1]:I.geometry.lengths,A=[],i=[];I.geometry.coords.forEach(((I,g)=>{g%2==0?A.push(I):i.push(I)})),C=b(V(A,g,l.xScale,e.xTranslate,!1),V(i,g,l.yScale,e.yTranslate,0===s),o)}let A={};return"esriGeometryTypePoint"===z[Z]?A={x:C[0][0][0],y:C[0][0][1]}:"esriGeometryTypeMultiPoint"===z[Z]?A={points:C[0]}:"esriGeometryTypePolyline"===z[Z]?A={paths:C}:"esriGeometryTypePolygon"===z[Z]&&(A={rings:C}),{geometry:A,attributes:g}}));return this._buildResponse(A,d)}_buildResponse(I,g){return{features:g,exceededTransferLimit:I.exceededTransferLimit,spatialReference:{wkid:4326,latestWkid:4326},geometryType:z[I.geometryType||127].replace("Type",""),hasM:I.hasM,hasZ:I.hasZ,globalIdFieldName:I.globalIdFieldName}}},GeometriesAtZoom:class{constructor(){this._geometriesAtZoom=new Array(24),this._maxGeometryZoom=0}async getKeysAtZoom(I,g){g=void 0!==g?g:this._maxGeometryZoom;const C=[];for(let A=Math.min(g,this._maxGeometryZoom);A>=I;A--)void 0!==this._geometriesAtZoom[A]&&C.push([...this._geometriesAtZoom[A].keys()]);return C.flat()}updateKeyAtZoom(I,g){let C="added";void 0===this._geometriesAtZoom[I]&&(this._geometriesAtZoom[I]=new Map),this._maxGeometryZoom=Math.max(this._maxGeometryZoom,I);for(let A=0;A<I;A++)void 0!==this._geometriesAtZoom[A]&&(this._geometriesAtZoom[A].delete(g),C="updated");return this._geometriesAtZoom[I].set(g,!0),C}async updateKeysAtZoom(I,g){return g.map((g=>this.updateKeyAtZoom(I,g)))}},DeZigZagJSON:class{constructor(I,g,C){this.srid="3857",this.features=I,this.transform=g,this.geometryType=C}async convert(){return this.features.map((I=>(I.geometry=this.convertGeometry(I.geometry),I)))}convertGeometry(I){const g=[],C=[],A=[];"esriGeometryPoint"===this.geometryType?(g.push(1),C.push(I.x),A.push(I.y)):"esriGeometryMultipoint"===this.geometryType?I.points.forEach((I=>{g.push(1),C.push(I[0]),A.push(I[1])})):"esriGeometryPolyline"===this.geometryType?I.paths.forEach((I=>{g.push(I.length),I.forEach((I=>{C.push(I[0]),A.push(I[1])}))})):"esriGeometryPolygon"===this.geometryType&&I.rings.forEach((I=>{g.push(I.length),I.forEach((I=>{C.push(I[0]),A.push(I[1])}))}));const i=b(V(C,g,this.transform.scale[0],this.transform.translate[0],!1),V(A,g,this.transform.scale[1],this.transform.translate[1],"upperLeft"===this.transform.originPosition),this.srid);let e={};return"esriGeometryPoint"===this.geometryType?e={x:i[0][0][0],y:i[0][0][1]}:"esriGeometryMultipoint"===this.geometryType?e={points:i[0]}:"esriGeometryPolyline"===this.geometryType?e={paths:i}:"esriGeometryPolygon"===this.geometryType&&(e={rings:i}),e}}};let x;self.addEventListener("message",(I=>{const g=I.data||I,C=(I,g,C,A)=>{postMessage({type:A||(g?"error":"response"),id:I,message:C,error:g})},A={init:I=>{const{id:g,command:A,message:i}=I;x=new Q[A](...i);const e=[...Object.getOwnPropertyNames(Q[A].prototype),...Object.keys(x)].map((I=>[I,typeof Q[A].prototype[I]])).reduce(((I,g)=>({...I,[g[0]]:g[1]})),{});C(g,void 0,e,"init_response")},get:function(I){const{id:g,command:A}=I;x&&x[A]?C(g,void 0,x[A]):C(g,void 0,void 0)},exec:function(I){const{id:g,command:A,message:i}=I;if(x&&x[A]&&"function"==typeof x[A]){const I=x[A].apply(x,i);I&&"function"==typeof I.then?I.then((I=>C(g,void 0,I))).catch((I=>C(g,I))):C(g,void 0,I)}else C(g,new Error(`command "${A}" not found`))}};A[g.type]&&A[g.type](g)}));const O=()=>Math.random().toString(36).substring(2);function j(I,g=[]){return function(){let I=!1;try{I="function"==typeof window.Worker}catch(g){I=!1}return I}()?new E(I,g):new _(I,g)}class E{constructor(I,g=[]){this.initId=O()+"-"+I,this.worker=new m,this.handlers=new Map,this.worker.onmessage=I=>{const g=I.data,C=this.handlers.get(g.id),A=this;if(C){if("response"===g.type&&C.res(g.message),"error"===g.type){const I=g.error||new Error(`Unknown error with ${this.subClass}`);C.rej(I)}"init_response"===g.type&&(this._=Object.keys(g.message).map((I=>{const C=typeof g.message[I];return[I,function(){return C?A.exec(I)(...arguments):A.get(I)}]})).reduce(((I,g)=>({...I,[g[0]]:g[1]})),{}),C.res(this._))}},this.worker.postMessage({type:"init",id:this.initId,command:I,message:g})}onLoad(){return new Promise((I=>{void 0===this._?this.handlers.set(this.initId,{res:I,rej:I}):I(this._)}))}exec(I){const g=this;return function(...C){return new Promise(((A,i)=>{const e=O()+"-"+I;g.handlers.set(e,{res:A,rej:i}),g.worker.postMessage({type:"exec",id:e,command:I,message:[...C]})}))}}get(I){return new Promise(((g,C)=>{const A=O()+"-"+I;this.handlers.set(A,{res:g,rej:C}),this.worker.postMessage({type:"get",id:A,command:I,message:[]})}))}}class _{constructor(I,g=[]){this.subClass=new Q[I](...g)}onLoad(){return new Promise((I=>I(this)))}get(I){return new Promise((g=>g(this.subClass[I])))}exec(I){const g=this;return function(...C){return Promise.resolve(g.subClass[I](...C))}}}class q{constructor(I){this._map=I}async fetch(I,g={},C){let A=I.toString();const i=g.body?A.replace(/\??$/,"?")+g.body:A;i.length>2048&&void 0===g.method&&(g.method="POST"),g.method=["POST","GET","PUT"].indexOf((g.method||"").toUpperCase())>-1?(g.method||"").toUpperCase():"GET","GET"===g.method&&(A=i);const e={url:A,method:g.method};return"POST"===g.method&&(g.headers&&(e.headers=g.headers),g.body&&(e.body=g.body.toString())),{arrayBuffer:async()=>(e.type="arrayBuffer",this._getResource(e,C)),json:async()=>(e.type="json",this._getResource(e,C)),text:async()=>(e.type="string",this._getResource(e,C))}}async _getResource(I,g){return new Promise(((C,A)=>{let i=this._map.style.getResource(Math.random().toString(32).substring(2),I,((I,g)=>{I?A(I.toString()):C(g)}));g&&g({cancel:()=>{i.cancel(),A("cancel")}})}))}}const $={where:"1=1",outfields:"*",resultRecordCount:void 0};function II(I){return class extends I.GeoJSONSource{constructor(g,C,A,i){super(g,{type:"geojson",collectResourceTiming:!1,data:{}},A,i),this._quantizedQuery=!1,this._requestFormat="json",this._geometriesAtZoom=j("GeometriesAtZoom"),this._requests=[],this._sortableFields=[],this._events=new I.Evented,this._liveLayer=!1,this._waitTimes={},this._isUpdateable=!1,window.layer=this,this.id=g,this._originalSource={...$,...C};const e=this._originalSource.url.match(/.+?[Feature|Map]Server\/\d{1,}/);if(!e)throw new Error("ArcGisRest URL is invalid "+this._originalSource.url);this._originalSource.url=e[0],window.source=this}onAdd(I){this.map=I,this._asyncLoad(I).then((()=>this.load()))}async _asyncLoad(I){const g=new URL(this._originalSource.url);g.searchParams.append("f","json"),this._originalSource.token&&g.searchParams.append("token",this._originalSource.token);const C=new q(I),A=await(await C.fetch(g)).json();if(A.error)return console.error("ArcGIS Error",A.error),!1;const i=A.maxRecordCount||500,e=(A.supportedQueryFormats||"").toLowerCase().replace(/\s/g,"").split(",").indexOf("pbf")>-1;this._requestFormat=e?"pbf":"json",this._quantizedQuery=!0===A.supportsCoordinatesQuantization&&("esriGeometryPolygon"===A.geometryType||"esriGeometryPolyline"===A.geometryType),A.fields&&(this._sortableFields=A.fields.filter((I=>["esriFieldTypeString","esriFieldTypeDouble","esriFieldTypeDate","esriFieldTypeGUID","esriFieldTypeGlobalID","esriFieldTypeInteger","esriFieldTypeOID","esriFieldTypeSingle","esriFieldTypeSmallInteger"].indexOf(I.type)>-1&&-1===I.name.indexOf("()")&&-1===(I.alias||"").indexOf("()"))).map((I=>I.name))),A.indexes&&(this.promoteId=A.indexes.filter((I=>!0===I.isUnique&&I.fields&&this._sortableFields.indexOf(I.fields)>-1)).map((I=>I.fields))[0]),A.fields&&(this._primaryKeyType=A.fields.filter((I=>I.name===this.promoteId)).map((I=>["esriFieldTypeDouble","esriFieldTypeDate","esriFieldTypeGUID","esriFieldTypeGlobalID","esriFieldTypeInteger","esriFieldTypeOID","esriFieldTypeSingle","esriFieldTypeSmallInteger"].indexOf(I.type)>-1?"number":"string"))[0]),this._originalSource.resultRecordCount=(this._originalSource.resultRecordCount||1/0)<i?this._originalSource.resultRecordCount:i,this.setData({type:"FeatureCollection",features:[]}),this._events.on("data",(I=>this.drawMapData(I.json,I.zoom))),this.loadMapData(I),I.on("moveend",(()=>this._liveLayer&&this._waitEvent("redrawMap",100))),this._events.on("redrawMap",(()=>this.loadMapData(I)))}loadTile(I,g){this._liveLayer||(this._liveLayer=!0,this._waitEvent("redrawMap",1e3)),super.loadTile(I,g)}async loadMapData(I,g){if(void 0===(I=void 0===I?this.map:I))throw new Error("Source Data (Source ID: "+this.id+") could not be loaded");console.log("LOADING");const C=this._quantizedQuery?Math.floor(this.map.getZoom()):this.map.getMaxZoom();let A=this._originalSource.where;const i={where:A};if(this.promoteId){const e=c((g=g||[I.getBounds().getWest(),I.getBounds().getSouth(),I.getBounds().getEast(),I.getBounds().getNorth()])[0],g[1]),l=c(g[2],g[3]),Z=[e.x,e.y,l.x,l.y],s=await this._geometriesAtZoom.exec("getKeysAtZoom")(C);i.geometry=Z.join(","),i.geometryType="esriGeometryEnvelope",i.inSR="3857";const o=I=>"string"===this._primaryKeyType?`'${I}'`:I;s.length&&(i.where=`(${A}) AND "${this.promoteId}" NOT IN (${s.map((I=>o(I))).join(",")})`)}this._requests.forEach((I=>I.cancel())),this._queryFeatures(this._originalSource.url,i,0,(I=>this._requests.push(I)),I,C),this._liveLayer=!1}async drawMapData(I,g){const C=this._esriJsonToFeatures(I),A=C.map((I=>I.properties[this.promoteId])),i=await this._geometriesAtZoom.exec("updateKeysAtZoom")(g,A),e={add:i.map(((I,g)=>{if("added"===I)return C[g]})).filter((I=>void 0!==I)),update:i.map(((I,g)=>{if("updated"===I){const I=C[g].geometry;return{id:A[g],newGeometry:I}}})).filter((I=>void 0!==I)),removeAll:!1,remove:[]};if(e.update.length||e.add.length)if(this.updateData&&this._isUpdateable)this.updateData(e);else{console.log("this._data",this._data);const I=this._data.features,g=I.map((I=>I.properties[this.promoteId]));for(let C=0;C<e.update.length;C++){let A=g.indexOf(e.update[C].id);A>-1&&(I[A].geometry=e.update[C].newGeometry||I[A].geometry)}for(let g=0;g<e.add.length;g++){const C=e.add[g];C.properties&&(C.id=C.id||C.properties[this.promoteId]),I.push(C)}this._data&&this.setData(this._data)}}_updateWorkerData(I){console.log("UPDATING!!",I),super._updateWorkerData(I)}async _queryFeatures(I,g,C,A,i,e){if(void 0===(i=void 0===i?this.map:i))throw new Error("Source Data (Source ID: "+this.id+") could not be loaded");const l=Array.isArray(this._originalSource.outfields)?this._originalSource.outfields.map((I=>`"${I}"`)).join(","):"*",Z=this._quantizedQuery?JSON.stringify(function(I,g=256){return{mode:"view",originPosition:"upperLeft",tolerance:G(I,g),extent:W([-180,-85.06,180,85.06])}}(e,this.tileSize)):"",s={where:this._originalSource.where,spatialRel:"esriSpatialRelIntersects",outFields:l,returnGeometry:!0,returnTrueCurves:!1,outSR:this._quantizedQuery||"pbf"===this._requestFormat?"3857":"4326",returnIdsOnly:!1,returnCountOnly:!1,returnZ:!1,returnM:!1,returnDistinctValues:!1,returnExtentOnly:!1,featureEncoding:"esriDefault",orderByFields:this._sortableFields.map((I=>`"${I}"`)).join(","),resultOffset:void 0!==C?C:0,resultRecordCount:this._originalSource.resultRecordCount,quantizationParameters:Z,f:this._requestFormat,...g},o=new q(i),d=new URL(I);Object.keys(s).map((I=>d.searchParams.append(I,s[I].toString())));const t=o.fetch(I+"/query",{body:d.search.replace(/^\?/,""),headers:{"content-type":"application/x-www-form-urlencoded"}},(I=>A&&A(I))),a=await await t;let m={features:[],exceededTransferLimit:!1};try{if("pbf"===s.f){const I=j("ConvertPbf",[await a.arrayBuffer()]);m=await I.exec("convert")()}else if(m=await a.json(),this._quantizedQuery){const I=j("DeZigZagJSON",[m.features,m.transform,m.geometryType]),g=await I.exec("convert")();m.spatialReference={wkid:4326},m.features=g}}catch(I){return void("cancel"!==I&&console.error("Error with request",I))}m&&m.features.length&&this._events.fire("data",{json:m,zoom:e}),!0===m.exceededTransferLimit&&this._queryFeatures(I,g,(C||0)+m.features.length,A,i,e)}_esriJsonToFeatures(I){if(-1===Object.keys({esriGeometryPoint:"Point",esriGeometryMultipoint:"MultiPoint",esriGeometryLine:"LineString",esriGeometryPolyline:"MultiLineString",esriGeometryPolygon:"MultiPolygon"}).indexOf(I.geometryType))throw new Error("Geometry "+I.geometryType+" not supported");return I.features.map((g=>(4326!==(I.spatialReference.latestWkid||I.spatialReference.wkid)&&console.warn("Unspported Projection ("+(I.spatialReference.latestWkid||I.spatialReference.wkid)+"), some data may not display correctly"),{type:"Feature",properties:g.attributes,geometry:i(g.geometry)})))}_waitEvent(I,g=100){console.log("Called",I,g),this._waitTimes[I]=(this._waitTimes[I]||0)+g,setTimeout((()=>{void 0!==this._waitTimes[I]&&(this._waitTimes[I]=this._waitTimes[I]-g,this._waitTimes[I]<=0&&(this._waitTimes[I]=0,this._events.fire(I)))}),g)}}}export{II as default};
